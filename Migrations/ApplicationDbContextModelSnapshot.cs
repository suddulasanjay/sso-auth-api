// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SSOAuthAPI.Data;

#nullable disable

namespace SSOAuthAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("trans")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<string>("ApplicationType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("application_type");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("client_secret");

                    b.Property<string>("ClientType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("client_type");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("concurrency_token");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("consent_type");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("display_name");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("display_names");

                    b.Property<string>("JsonWebKeySet")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("json_web_key_set");

                    b.Property<string>("Permissions")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("permissions");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("post_logout_redirect_uris");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("properties");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("redirect_uris");

                    b.Property<string>("Requirements")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("requirements");

                    b.Property<string>("Settings")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("settings");

                    b.HasKey("Id")
                        .HasName("pk_open_iddict_applications");

                    b.HasAlternateKey("ClientId")
                        .HasName("ak_open_iddict_applications_client_id");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasDatabaseName("ix_open_iddict_applications_client_id");

                    b.ToTable("OpenIddictApplications", "trans");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("application_id");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("concurrency_token");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("creation_date");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("properties");

                    b.Property<string>("Scopes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("scopes");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("subject");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_open_iddict_authorizations");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type")
                        .HasDatabaseName("ix_open_iddict_authorizations_application_id_status_subject_type");

                    b.ToTable("OpenIddictAuthorizations", "trans");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("concurrency_token");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Descriptions")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descriptions");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("display_name");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("display_names");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("properties");

                    b.Property<string>("Resources")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("resources");

                    b.HasKey("Id")
                        .HasName("pk_open_iddict_scopes");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_open_iddict_scopes_name")
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("OpenIddictScopes", "trans");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("application_id");

                    b.Property<string>("AuthorizationId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("authorization_id");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("concurrency_token");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiration_date");

                    b.Property<string>("Payload")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("payload");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("properties");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("redemption_date");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("reference_id");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("subject");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_open_iddict_tokens");

                    b.HasIndex("AuthorizationId")
                        .HasDatabaseName("ix_open_iddict_tokens_authorization_id");

                    b.HasIndex("ReferenceId")
                        .IsUnique()
                        .HasDatabaseName("ix_open_iddict_tokens_reference_id")
                        .HasFilter("[reference_id] IS NOT NULL");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type")
                        .HasDatabaseName("ix_open_iddict_tokens_application_id_status_subject_type");

                    b.ToTable("OpenIddictTokens", "trans");
                });

            modelBuilder.Entity("SSOAuthAPI.Data.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_time");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_providers");

                    b.ToTable("providers", "trans");
                });

            modelBuilder.Entity("SSOAuthAPI.Data.Entities.ProviderUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_time");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_time");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int")
                        .HasColumnName("provider_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("status");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("subject_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_provider_users");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_provider_users_user_id");

                    b.HasIndex("ProviderId", "SubjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_provider_users_provider_id_subject_id")
                        .HasFilter("[subject_id] IS NOT NULL");

                    b.ToTable("provider_users", "trans");
                });

            modelBuilder.Entity("SSOAuthAPI.Data.Entities.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.PrimitiveCollection<string>("AuthorizationIds")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("authorization_ids");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_time");

                    b.Property<DateTime>("LastAccessTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_access_time");

                    b.Property<DateTime>("LastAuthenticated")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_authenticated");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_sessions");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_sessions_user_id");

                    b.ToTable("sessions", "trans");
                });

            modelBuilder.Entity("SSOAuthAPI.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_time");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("is_admin");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_login_at");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_time");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_hash");

                    b.Property<DateTime?>("PasswordModifiedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("password_modified_time");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int")
                        .HasColumnName("provider_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("status");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit")
                        .HasColumnName("verified");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("verified_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("ProviderId")
                        .HasDatabaseName("ix_users_provider_id");

                    b.ToTable("users", "trans");
                });

            modelBuilder.Entity("SSOAuthAPI.Data.Entities.UserClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppId")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("app_id");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_time");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_time");

                    b.Property<string>("Scope")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("scope");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_clients");

                    b.HasIndex("AppId")
                        .HasDatabaseName("ix_user_clients_app_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_clients_user_id");

                    b.ToTable("user_clients", "trans");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fk_open_iddict_authorizations_open_iddict_applications_application_id");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fk_open_iddict_tokens_open_iddict_applications_application_id");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId")
                        .HasConstraintName("fk_open_iddict_tokens_open_iddict_authorizations_authorization_id");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("SSOAuthAPI.Data.Entities.ProviderUser", b =>
                {
                    b.HasOne("SSOAuthAPI.Data.Entities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_provider_users_providers_provider_id");

                    b.HasOne("SSOAuthAPI.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_provider_users_users_user_id");

                    b.Navigation("Provider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SSOAuthAPI.Data.Entities.Session", b =>
                {
                    b.HasOne("SSOAuthAPI.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sessions_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SSOAuthAPI.Data.Entities.User", b =>
                {
                    b.HasOne("SSOAuthAPI.Data.Entities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_users_providers_provider_id");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("SSOAuthAPI.Data.Entities.UserClient", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .HasPrincipalKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_clients_open_iddict_applications_app_id");

                    b.HasOne("SSOAuthAPI.Data.Entities.User", "User")
                        .WithMany("UserClients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_clients_users_user_id");

                    b.Navigation("App");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("SSOAuthAPI.Data.Entities.User", b =>
                {
                    b.Navigation("UserClients");
                });
#pragma warning restore 612, 618
        }
    }
}
